<?php

/**
 * @file
 * Core HWJMA Site module
 */
use Drupal\node\Entity\NodeType;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\node\Entity\Node;
use Drupal\Core\Url;
use HighWire\Utility\Str;
use Drupal\highwire_content\HighWireContent;
use Drupal\views\Element\View;
use Drupal\views\Views;
use Drupal\Core\Cache\Cache;
use Drupal\Component\Utility\Html;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;

require_once __DIR__.'/includes/functions.inc';

define('HW_NODE_TYPE_JOURNAL_ARTICLE', 'journal_article');

/**
* Implements hook_entity_extra_field_info().
*/
function journal_article_detail_entity_extra_field_info() {
  $fields = [];
  // Display-only fields for HighWire content types.
  foreach (NodeType::loadMultiple() as $bundle) {
    $node_type = $bundle->Id();
    if ($node_type == HW_NODE_TYPE_JOURNAL_ARTICLE) {
    // JCOREX-101 Info and Metrics tab  
    $fields['node'][$node_type]['display']['hwjma_info_metrics_tab'] = [
      'label' => t('Info & Metrics'),
       'description' => t('Info & Metrics tab'),
       'visible' => FALSE,
     ];
	  // Add Altmetrics.
	  $fields['node'][$node_type]['display']['hwjma_altmetrics'] = [
		'label' => t('Altmetrics'),
		'description' => t('Show / altmetrics.'),
		'visible' => FALSE,
	  ];
    //Usage Stats
    $fields['node'][$node_type]['display']['hwjma_usage_stats'] = [
      'label' => t('HWJMA Usage Stats'),
      'description' => t('Usage Statistics Table'),
      'weight' => 100,
      'visible' => FALSE,
    ];
    // JCOREX-343 => Email Article
    $fields['node'][$node_type]['display']['email_article'] = [
      'label' => t('Email Article'),
      'description' => t('Email Article For Send Mail'),
      'weight' => 100,
      'visible' => FALSE,
    ];
    // JCOREX-352 => Article Response
    $fields['node'][$node_type]['display']['article_response_tab'] = [
      'label' => t('Responses'),
      'description' => t('Article Response Submit Form'),
      'weight' => 100,
      'visible' => FALSE,
    ];
  }
 }
 return $fields;
}

/**
* Implements hook_ENTITY_TYPE_view().
*/
function journal_article_detail_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if (!HighWireContent::isHighWire($entity)) {
    return;
  }
  $corpus = $entity->hasField('corpus') && !$entity->get('corpus')->isEmpty() ? $entity->get('corpus')->getString() : '';
  $content_type = $entity->bundle();
  if ($content_type == HW_NODE_TYPE_JOURNAL_ARTICLE) {
	  // Add Info & Metrics.
	  if ($display->getComponent('hwjma_info_metrics_tab')) {
      $block_manager = \Drupal::service('plugin.manager.block');
      $plugin_block = $block_manager->createInstance('hwjma_info_metrics_tab', []);
      $plugin_block->setContextValue('node', $entity);
      $render = $plugin_block->build();
      if (!empty($render)) {
        $build['hwjma_info_metrics_tab'] = $render;
      }
    }
	  // Add the Altmetrics field
    if ($display->getComponent('hwjma_altmetrics')) {
      $block_manager = \Drupal::service('plugin.manager.block');
      $plugin_block = $block_manager->createInstance('hwjma_altmetrics', []);
      $plugin_block->setContextValue('node', $entity);
      $render = $plugin_block->build();
      if (!empty($render)) {
        $build['hwjma_altmetrics'] = $render;
      }
    }
    // Add the usage-stats pseudofield
    if ($display->getComponent('hwjma_usage_stats')) {
      // Get backend configurations for usage stats
      $usageStatsConfig = \Drupal::config('journal_article_detail.settings');
      $usageStatsDefaultView = $usageStatsConfig->get('default_view');
      $usageStatsDateFilter = $usageStatsConfig->get('date_filters');
      $override_title = $usageStatsConfig->get('override_title');
      $usageMetricTypesFilter = $usageStatsConfig->get('metric_types');
      $defaultViewFilter = $usageStatsConfig->get('default_view');
      // Get avtive usage metric types
      $usageMetricTypesArray = [];
      foreach ($usageMetricTypesFilter as $key => $value) {
        if (!empty($value)) {
          $usageMetricTypesArray[] = $value;  
        }
      }
      $filterTabData = '';
      // Frontend tab filter values: Article lifetime, Last 6 Months, This Month
      $filterTabValues = [
        'ArticleLifetime' => 'Article Lifetime',
        'LastSixMonths' => 'Last 6 Months',
        'ThisMonth' => 'This Month'
      ];
      $fromDate = '';
      $toDate = '';
      // Set from and to date according to tab filter (tab Article lifetime, Last 6 Months, This Month)
      if ($defaultViewFilter == 'LastSixMonths') {
        $fromDate = date("Y-m-d", mktime(0, 0, 0, date("m")-6, date("d"), date("Y")));
        $toDate = date("Y-m-d");
      } elseif ($defaultViewFilter == 'ThisMonth') {
        $fromDate = date("Y-m-01");
        $toDate = date("Y-m-d");
      }
      $nid = $entity->get('nid')->getString();
      // Prepare a tab/button/link for frontend (tab Article lifetime, Last 6 Months, This Month)
      foreach ($usageStatsDateFilter as $key => $value) {
        if (!empty($value) && !empty($filterTabValues[$value])) {
          $filterTabData .= '<a id="'.$value.'" href="/journal_article_detail?type='.$key.'&nid='.$entity->get('nid')->getString().'" class="btn btn-primary tab-margin usagestatstab js-form-submit form-submit use-ajax'. ($defaultViewFilter == $value ? " active" : "") .'">'.$filterTabValues[$value].'</a>';
        }
      }
      $filter_tabs = '<div class="usage-stats-section"><div class="Usage-stats-title"><h2>'.$override_title.':</h2></div><div class="usage-stats-tabs"><p>'.$filterTabData.'</p></div></div>';
      $build['hwjma_usage_stats']['custom_tabs'] = [
        '#type' => 'markup',
        '#markup' => $filter_tabs,
      ];
      // Prepare a custom date range form with date calender
      if (isset($usageStatsDateFilter['ViewRange']) &&!empty($usageStatsDateFilter['ViewRange'])) {
        $form = \Drupal::formBuilder()->getForm('Drupal\journal_article_detail\Form\UsageStatsDateRangeForm', $nid);
        $build['hwjma_usage_stats']['custom_form'] = $form;
      }
      $block_manager = \Drupal::service('plugin.manager.block');
      $plugin_block = $block_manager->createInstance('hwjma_usage_stats', [
        'query_type' => 'ArticleLifetime',
        'views' => $usageMetricTypesArray,
        'date_format' => 'custom',
        'custom_date_format' => 'M Y',
        'limit' => '',
        'fromDate' => $fromDate,
        'toDate' => $toDate,
      ]);
      $plugin_block->setContextValue('node', $entity);
      $render = $plugin_block->build();
      if (!empty($render)) {
       $build['hwjma_usage_stats']['data'] = $render;
      }
    }
    // Add Email Article
    if ($display->getComponent('email_article')) {
      $journalArticleDetailConfig = \Drupal::config('journal_article_detail.settings');
      $emailArticleDisplay = $journalArticleDetailConfig->get('email_article_display');
      $article_title = $entity->get('title')->getString();
      // Check email article display configuration is true then get a from
      if (isset($emailArticleDisplay) && !empty($emailArticleDisplay)) {
        $nid = $entity->get('nid')->getString();
        $form = \Drupal::formBuilder()->getForm('Drupal\journal_article_detail\Form\EmailArticleForm', $entity);
        $build['email_article'] = $form;
      }
    }
    // Add Article Response Tab
    if ($display->getComponent('article_response_tab')) {
      $form_link = '<div class="panel-pane pane-highwire-article-add-comments">
      <div class="pane-content">
        <p id="eletter-submit-form" title="Response to Article" class="hw-add-e-letters">Submit a Response to This Article</p>  </div>        
      </div>';
      $build['article_response_tab']['response_form_link'] = [
        '#type' => 'markup',
        '#markup' => $form_link,
      ];
      $node = \Drupal::entityTypeManager()->getStorage('node')->create(['type' => 'eletters']);
      $form = \Drupal::service('entity.form_builder')->getForm($node);
      $build['article_response_tab']['custom_form'] = $form;
      $build['article_response_tab']['list_heading'] = [
        '#type' => 'markup',
        '#markup' => '<div class="jump-comment-section">Jump to comment: </div>',
      ];
      $build['article_response_tab']['listing'] = views_embed_view('eletters', 'block_1');
    }
  }
}

/**
 * Implements hook_theme().
 */
function journal_article_detail_theme() {
  return [
		'hwjma_info_metrics_tab' => [
		  'variables' => ['journal_title' => NULL, 'authors_name' => NULL, 
                      'doi' => NULL, 
                      'doi_link' => NULL,
                      'date_released' => NULL,
                      'eissn' => NULL,
                      'pissn' => NULL,
                      'issue' => NULL,
                      'volume' => NULL
                    ],
		],
    'hwjma_alt_metrics' => [
		  'variables' => ['altmetrics_data' => NULL, 'altmetric_title' => NULL],
		],
    'hwjma_usage_stats_data' => [
      'variables' => ['filter_tabs' => NULL, 'usage_stats_data' => NULL, 'form_range' => NULL]
    ],
    'altmetrics_data' => [
      'variables' => ['altmetrics_data' => NULL, 'altmetrice_setting' => NULL, 'pager' => NULL]
    ],
    'email_article' => [
      'variables' => ['article_title' => NULL, 'article_title_link' => NULL, 'email_article_display' => NULL, 'custom_form' => NULL]
    ]
	];
}

/**
 * Implements hook for page attachment labraries.
 */
function journal_article_detail_page_attachments_alter(array &$page) {
  // JCOREX-338: Author tooltip css path => web>modules>highwire>journal_article_detail>css>tooltip_popup.css
  $page['#attached']['library'][] = 'journal_article_detail/tooltip_popup';
  // JOCREX-101: Jump to Section css and js path => web>modules>highwire>journal_article_detail>css>jumptosection.css web>modules>highwire>journal_article_detail>js>jumptosection.js
  $page['#attached']['library'][] = 'journal_article_detail/jumptosection';
  // JCOREX-343 Email Article css path => web>modules>highwire>journal_article_detail>css>emailarticle.css
  $page['#attached']['library'][] = 'journal_article_detail/emailarticle';
  // JCOREX-342 Email Article js path => web>modules>highwire>journal_article_detail>js>articleprint.js
  $page['#attached']['library'][] = 'journal_article_detail/articleprint';
  // JOCREX-352: Article Response Tab css and js path => web>modules>highwire>journal_article_detail>css>article_response_tab.css web>modules>highwire>journal_article_detail>js>article_response_tab.js
  $page['#attached']['library'][] = 'journal_article_detail/article_response_tab';
}

/**
 * Implements hook_mail().
 */
function journal_article_detail_mail($key, &$message, $params) {
  // Bind a mail params with message
  $options = array(
    'langcode' => $message['langcode'],
  );
  switch ($key) {
    case 'email_article':
      $message['from'] = $params['from'];
      $message['subject'] = t('@title', array('@title' => $params['title']), $options);
      $message['body'][] = Html::escape($params['message']);
      break;
    case 'eletter_front_email':
      $message['from'] = $params['from'];
      $message['subject'] = t('@title', array('@title' => $params['subject']), $options);
      $message['body'][] = Html::escape($params['body']);
      break;
    case 'highwire_responses_moderation':
      $message['from'] = $params['from'];
      $message['subject'] = t('@title', array('@title' => $params['subject']), $options);
      $message['body'][] = Html::escape($params['body']);
      break;
  }
}

/**
 * Implements hook_form_alter().
 */
function journal_article_detail_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Define the view IDs we want to target.
  $view_ids = ['past_issue'];

  // Check if the current form is the exposed filter form of the 'past_issue' view.
  if ($form['#id'] == 'views-exposed-form-past-issue-page-1' && in_array($form_state->get('view')->id(), $view_ids)) {
    // Attach a library to the form for styling or additional functionality.
    $form['#attached']['library'][] = 'journal_article_detail/pastissue';
    
    // Get the current path and extract the 'corpus' from it.
    $current_path = \Drupal::service('path.current')->getPath();
    $current_path_array = explode('/', $current_path);
    $corpus = $current_path_array[2];

    // Query for journal volume information.
    $query = \Drupal::database()->select('node_field_data', 'n');
    $query->join('node__corpus', 'c', 'c.entity_id = n.nid');
    $query->fields('n', ['title']);
    $query->condition ('n.type', 'journal_volume');
    $query->condition ('c.bundle', 'journal_volume');
    $query->condition ('c.corpus_value', $corpus);
    $query->condition('n.status', '1');
    $vol_result = $query->execute()->fetchCol();

    $vol_id = '';
    if(!empty($vol_result)){
      foreach($vol_result as $val){
        $vol_id .= '<li id="'.$val.'">'.$val.'</li>';
      }
    }

    // Query for journal issue years.
    $date_query = \Drupal::entityQuery('node');
    $date_query->condition('type', 'journal_issue');
    $date_query->condition('status', 1);
    $date_query->condition ('corpus', $corpus);
    $year_result = $date_query->execute(); 

    $year_nids = array_keys($year_result);
    $highwire_first_issue = Node::load($year_nids[0]);
    $highwire_last_issue = Node::load($year_nids[count($year_nids) - 1]);

    $highwire_journal_start_year = $highwire_first_issue->date_ppub->getValue()[0]['original'];
    $highwire_journal_end_year = $highwire_last_issue->date_ppub->getValue()[0]['original'];

    $start_year = (date("Y", strtotime($highwire_journal_start_year)));
    $end_year = (date("Y", strtotime($highwire_journal_end_year)));

    $start_decade = (int) floor($start_year / 10) * 10;
    $end_decade = (int) floor($end_year / 10) * 10;
    $ppub_year = [];
    while ($start_decade <= $end_decade) {
      $parent_year = $start_decade . 's';
      for ($i = $start_decade; $i < $start_decade + 10; $i++) {
        if ($i >= $start_year && $i <= $end_year) {
          $ppub_year[$parent_year][] = $i;
        }
      }
      $start_decade = $start_decade + 10;
    }

    $year_id = '';
    $ppub_years_array = '';
    if(!empty($ppub_year)){
      foreach($ppub_year as $k => $v){
        $year_id .= '<li id="'.$k.'_year">'.$k.'</li>';
        $ppub_years_array .= '<span class="year-child" id="'.$k.'"><ul class="year-sub-tabs">';
        foreach($v as $year){
          $ppub_years_array .= '<li id="'.$year.'">'.$year.'</li>';
        }
        $ppub_years_array .= '</ul></span>';
      }
    }

   // Add volume lists to the form.
   $form['volume_int']['#suffix'] = '<div class="vol-list">
                          <ul class="volumes-browser-slider">
                           '.$vol_id.'
                          </ul>
                        </div>';

    // Add year lists to the form.
    $form['date_ppub_year']['#suffix'] = '<div class="year-list">
                          <ul class="year-browser-slider year-nav-tabs">
                            '.$year_id.'
                          </ul>
                          <div class="year-sub-slider">'.$ppub_years_array.'</div>
                        </div>';

   // Add any additional HTML elements or content to the form.
   $form['#suffix'] = '<div class="past-issue-heading"></div>';
  }

  if ($form_id == 'node_eletters_form') {
    $alias = \Drupal::service('path.alias_manager')->getPathByAlias($_SERVER['SCRIPT_URL']);
    $params = Url::fromUri("internal:" . $alias)->getRouteParameters();
    $article_id = $params['entity_id'];
    if (!empty($article_id)) {
      $article_node_load = Node::load($article_id);
      $form['field_highwire_comment_subject']['widget'][0]['target_id']['#default_value'] = $article_node_load;
      $form['field_highwire_comment_response']['widget'][0]['target_id']['#default_value'] = $article_node_load;
    }
    $form['#action'] = '/node/add/eletters';
    $form['actions']['submit']['#submit'][] = 'eletter_module_form_submit';
  }
}

/**
 * Implements hook_views_pre_view().
 *
 * This function is called before a view is executed and is used to modify the
 * view's settings dynamically.
 *
 * @param ViewExecutable $view
 *   The ViewExecutable object representing the view.
 * @param string $display_id
 *   The current display ID.
 * @param array $args
 *   An array of arguments passed to the view.
 */
function journal_article_detail_views_pre_view(ViewExecutable $view, string $display_id, array $args) {
  // Check if the current view is 'past_issue'.
  if ($view->id() == 'past_issue') {
    // Get the current path.
    $current_path = \Drupal::service('path.current')->getPath();
    $current_path_array = explode('/', $current_path);
    $corpus = $current_path_array[2];
  
    // Query for 'journal_issue' nodes based on type and 'corpus' for latest year.
    $date_query = \Drupal::entityQuery('node');
    $date_query->condition('type', 'journal_issue');
    $date_query->condition('status', 1);
    $date_query->condition ('corpus', $corpus);
    $year_result = $date_query->execute(); 
    if (!empty($year_result)) {
      // Get the last journal issue node.
      $year_nids = array_keys($year_result);
      $highwire_last_issue = Node::load($year_nids[count($year_nids) - 1]);
      $highwire_journal_end_year = $highwire_last_issue->date_ppub->getValue()[0]['original'];

      // Modify the view's exposed input to filter by the latest year.
      $end_year = (date("Y", strtotime($highwire_journal_end_year)));
      $exposed_input = $view->getExposedInput();
      $filters = $view->display_handler->getOption('filters');
      $filters["date_ppub_year"]["value"]["value"] = $end_year;
      $view->display_handler->overrideOption('filters', $filters); 
    }
  }
}

function eletter_module_form_submit(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  // Get config values
  $journalArticleDetailConfig = \Drupal::config('journal_article_detail.settings');
  $sender_email = $journalArticleDetailConfig->get('highwire_rr_email_sender');
  $sender_msg = $journalArticleDetailConfig->get('highwire_rr_email_response_sent');
  $email_subject = $journalArticleDetailConfig->get('highwire_rr_email_subject');
  $eletter_frontend_submit_msg = $journalArticleDetailConfig->get('highwire_e_letter_submission_message');
  $from_sender_email = $journalArticleDetailConfig->get('highwire_rr_email_sender');
  // Retrieve article details.
  if (!empty($form_state->getValue('field_highwire_comment_response'))) {
    $article_nid = $form_state->getValue('field_highwire_comment_response')[0]['target_id'];
  }
  $params = [];
  $params['from'] = $from_sender_email;
  $params['body'] = $sender_msg;
  $params['subject'] = $email_subject;
  // Get a drupal mail service
  $mail_manager = \Drupal::service('plugin.manager.mail');
  $contributor_data = $form_state->getValue('field_contributors');
  foreach ($contributor_data as $key => $value) {
    if (is_numeric($key)) {
      $to_email = $value['subform']['field_first_name_and_middle_init'][0]['value'] . " " . $value['subform']['field_last_name'][0]['value'] . '<'. $value['subform']['field_email_address'][0]['value'] . '>';
    }
    if (!empty($to_email)) {
      // Send a mail
      $result = $mail_manager->mail('journal_article_detail',
      'eletter_front_email',
      $to_email,
      \Drupal::currentUser()->getPreferredLangcode(),
      $params,
      NULL,
      TRUE);
      // If mail not send then set error message
      if ($result['result'] != true) {
        $message = t('There was a problem sending your email notification to @email.', array('@email' => $to));
        drupal_set_message($message, 'error');
        return;
      }
    }
  }
  // Send a notification to moderator
  highwire_responses_moderation_notify_moderator($form_state, $journalArticleDetailConfig);
  // Redirect on home page
  // $form_state->setRedirect('<front>');
  \Drupal::messenger()->deleteAll();
  \Drupal::messenger()->addMessage($eletter_frontend_submit_msg);  
}
